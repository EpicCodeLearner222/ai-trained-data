<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Detector with Sentence Similarity</title>
</head>
<body>
    <h1>AI Detector with Sentence Similarity</h1>
    <p>Enter a sentence to see the likelihood that it is AI-generated:</p>
    <textarea id="inputText" rows="4" cols="50" placeholder="Enter your text here..."></textarea>
    <br><br>
    <button onclick="checkText()">Check Text</button>
    <p id="result"></p>

    <script>
        // URL of the raw file with both AI and Human-generated sentences from GitHub
        const aiDataUrl = 'https://raw.githubusercontent.com/EpicCodeLearner222/ai-trained-data/main/aitext';

        // Initialize arrays for AI and Human sentences
        let aiGeneratedSentences = [];
        let humanWrittenSentences = [];

        // Fetch the data as text from the GitHub URL
        fetch(aiDataUrl)
            .then(response => response.text())  // Treat the response as plain text
            .then(data => {
                const sentences = data.split("\n").map(sentence => sentence.trim()).filter(sentence => sentence !== "");
                aiGeneratedSentences = sentences.slice(0, sentences.length / 2);  // First half for AI
                humanWrittenSentences = sentences.slice(sentences.length / 2);  // Second half for Human
            })
            .catch(error => console.error('Error fetching data:', error));

        // Tokenize text
        function tokenize(text) {
            return text.toLowerCase().split(/\W+/).filter(Boolean);
        }

        // Vectorize text into word frequency vectors
        function vectorize(tokens) {
            const freqMap = {};
            tokens.forEach(token => {
                if (freqMap[token]) {
                    freqMap[token]++;
                } else {
                    freqMap[token] = 1;
                }
            });
            return freqMap;
        }

        // Compute cosine similarity between two vectors
        function cosineSimilarity(vec1, vec2) {
            const intersection = Object.keys(vec1).filter(key => key in vec2);
            const dotProduct = intersection.reduce((sum, key) => sum + vec1[key] * vec2[key], 0);
            const magnitude1 = Math.sqrt(Object.values(vec1).reduce((sum, val) => sum + val * val, 0));
            const magnitude2 = Math.sqrt(Object.values(vec2).reduce((sum, val) => sum + val * val, 0));
            return magnitude1 && magnitude2 ? dotProduct / (magnitude1 * magnitude2) : 0;
        }

        // Function to check similarities
        function checkText() {
            const inputText = document.getElementById("inputText").value.trim();
            const result = document.getElementById("result");

            if (inputText === "") {
                result.textContent = "Please enter some text to analyze.";
                return;
            }

            const inputTokens = tokenize(inputText);
            const inputVector = vectorize(inputTokens);

            let highestAiSimilarity = 0;
            let highestHumanSimilarity = 0;
            let exactMatchFoundInHuman = false;

            // Compare with AI-generated sentences
            aiGeneratedSentences.forEach(sentence => {
                const sentenceTokens = tokenize(sentence);
                const sentenceVector = vectorize(sentenceTokens);
                const similarity = cosineSimilarity(inputVector, sentenceVector);
                highestAiSimilarity = Math.max(highestAiSimilarity, similarity);
            });

            // Compare with human-written sentences
            humanWrittenSentences.forEach(sentence => {
                if (sentence.toLowerCase() === inputText.toLowerCase()) {
                    exactMatchFoundInHuman = true;
                }
                const sentenceTokens = tokenize(sentence);
                const sentenceVector = vectorize(sentenceTokens);
                const similarity = cosineSimilarity(inputVector, sentenceVector);
                highestHumanSimilarity = Math.max(highestHumanSimilarity, similarity);
            });

            // Determine likelihood of AI-generated content
            let likelihood;
            if (exactMatchFoundInHuman) {
                likelihood = (0).toFixed(2); // If exact match found in human data, set likelihood to 0%
            } else {
                likelihood = (highestAiSimilarity * 100).toFixed(2);
                if (highestHumanSimilarity > highestAiSimilarity) {
                    likelihood = ((1 - highestHumanSimilarity) * 100).toFixed(2);
                }
            }

            result.textContent = `Likelihood of AI-generated content: ${likelihood}%`;
        }
    </script>
</body>
</html>
